package com.aoindustries.aoserv.portmon;
/*
 * Copyright 2001-2009 by AO Industries, Inc.,
 * 7262 Bull Pen Cir, Mobile, Alabama, 36695, U.S.A.
 * All rights reserved.
 */
import com.aoindustries.aoserv.client.*;
import com.aoindustries.aoserv.daemon.*;
import com.aoindustries.email.*;
import com.aoindustries.io.*;
import com.aoindustries.profiler.*;
import com.aoindustries.sql.*;
import com.aoindustries.util.*;
import com.oreilly.servlet.*;
import java.io.*;
import java.sql.*;
import java.util.*;

/**
 * Errors generated by both <code>PortMonitor</code>, <code>PortConnector</code>,
 * and <code>Watchdog</code> are batched and sent with no more than one message
 * per time interval.
 *
 * @author  AO Industries, Inc.
 */
public final class BatchEmailer extends Thread {

    private static final int REPORT_INTERVAL=5*60*1000;

    static final int
        PORT_DISTRIBUTION=0,
        CONNECT_EXCEPTION=1,
        IO_EXCEPTION=2,
        PROTOCOL_ERROR=3,
        TIME_OUT=4
    ;
    
    private static final String[] codes={
        "PD",
        "CO",
        "IO",
        "PE",
        "TO"
    };
    
    private static final String[] descs={
        "Port distribution failure",
        "ConnectException",
        "IOException",
        "Protocol Error",
        "Time Out"
    };

    BatchEmailer() {
        super("BatchEmailer");
        Profiler.startProfile(Profiler.FAST, BatchEmailer.class, "<init>()", null);
        try {
            setPriority(Thread.NORM_PRIORITY+1);
        } finally {
            Profiler.endProfile(Profiler.FAST);
        }
    }

    static void batchError(int code) throws IOException, SQLException {
        Profiler.startProfile(Profiler.FAST, BatchEmailer.class, "batchError(int)", null);
        try {
            batchError(new PortError(code));
        } finally {
            Profiler.endProfile(Profiler.FAST);
        }
    }
    
    static void batchError(
        int code,
        AOServer aoServer,
        String ipAddress,
        int port,
        String netProtocol,
        String appProtocol
    ) throws IOException, SQLException {
        Profiler.startProfile(Profiler.FAST, BatchEmailer.class, "batchError(int,AOServer,String,int,String,String)", null);
        try {
            batchError(
                new PortError(
                    code,
                    aoServer,
                    ipAddress,
                    port,
                    netProtocol,
                    appProtocol
                )
            );
        } finally {
            Profiler.endProfile(Profiler.FAST);
        }
    }
    
    private static final List<PortError> errors=new ArrayList<PortError>();

    private static void batchError(PortError error) throws IOException, SQLException {
        Profiler.startProfile(Profiler.IO, BatchEmailer.class, "batchError(PortError)", null);
        try {
            synchronized(System.out) {
                System.out.print(SQLUtility.getDateTime(error.time));
                System.out.print(", ");
                System.out.print(descs[error.errorCode]);
                if(error.aoServer!=null) {
                    System.out.print(", ");
                    System.out.print(error.aoServer.getServer().getHostname());
                }
                if(error.ipAddress!=null) {
                    System.out.print(", ");
                    System.out.print(error.ipAddress);
                }
                if(error.port!=-1) {
                    System.out.print(", ");
                    System.out.print(error.port);
                }
                if(error.netProtocol!=null) {
                    System.out.print(", ");
                    System.out.print(error.netProtocol);
                }
                if(error.appProtocol!=null) {
                    System.out.print(", ");
                    System.out.print(error.appProtocol);
                }
                System.out.print('\n');
            }
            synchronized(errors) {
                errors.add(error);
            }
        } finally {
            Profiler.endProfile(Profiler.IO);
        }
    }

    public void run() {
        Profiler.startProfile(Profiler.UNKNOWN, BatchEmailer.class, "run()", null);
        try {
            while(true) {
                try {
                    while(true) {
                        sleep(REPORT_INTERVAL);
                        
                        // Grab the data
                        int size;
                        List<PortError> reportErrors=null;
                        synchronized(errors) {
                            size=errors.size();
                            if(size>0) {
                                reportErrors=new ArrayList<PortError>(size);
                                reportErrors.addAll(errors);
                                errors.clear();
                            }
                        }
                        
                        if(size>0) {
                            // Generate the stats
                            Map<Integer,Integer> errorCodes=new HashMap<Integer,Integer>();
                            Map<AOServer,Integer> aoServers=new HashMap<AOServer,Integer>();
                            Map<String,Integer> ipAddresses=new HashMap<String,Integer>();
                            Map<Integer,Integer> ports=new HashMap<Integer,Integer>();
                            Map<String,Integer> netProtocols=new HashMap<String,Integer>();
                            Map<String,Integer> appProtocols=new HashMap<String,Integer>();
                            for(int c=0;c<size;c++) {
                                PortError error=reportErrors.get(c);
                                
                                // Add the error code count
                                Integer code=Integer.valueOf(error.errorCode);
                                Integer count=errorCodes.get(code);
                                errorCodes.put(code, Integer.valueOf(count==null?1:(count.intValue()+1)));
                                
                                // Add the server count
                                AOServer aoServer=error.aoServer;
                                if(aoServer!=null) {
                                    count=aoServers.get(aoServer);
                                    aoServers.put(aoServer, Integer.valueOf(count==null?1:(count.intValue()+1)));
                                }
                                
                                // Add the ipAddress count
                                String ipAddress=error.ipAddress;
                                if(ipAddress!=null) {
                                    count=ipAddresses.get(ipAddress);
                                    ipAddresses.put(ipAddress, Integer.valueOf(count==null?1:(count.intValue()+1)));
                                }
                                
                                // Add the port count
                                int port=error.port;
                                if(port!=-1) {
                                    Integer iport=Integer.valueOf(port);
                                    count=errorCodes.get(iport);
                                    ports.put(iport, Integer.valueOf(count==null?1:(count.intValue()+1)));
                                }
                                
                                // Add the netProtocol count
                                String netProtocol=error.netProtocol;
                                if(netProtocol!=null) {
                                    count=netProtocols.get(netProtocol);
                                    netProtocols.put(netProtocol, Integer.valueOf(count==null?1:(count.intValue()+1)));
                                }

                                // Add the appProtocol count
                                String appProtocol=error.appProtocol;
                                if(appProtocol!=null) {
                                    count=appProtocols.get(appProtocol);
                                    appProtocols.put(appProtocol, Integer.valueOf(count==null?1:(count.intValue()+1)));
                                }
                            }
                            
                            // Send the summary emails
                            String smtpServer=AOServDaemonConfiguration.getMonitorSmtpServer();
                            String[] summaryTos=StringUtility.splitString(AOServDaemonConfiguration.getMonitorEmailSummaryTo(), '|');
                            String summaryFrom=AOServDaemonConfiguration.getMonitorEmailSummaryFrom();

                            MailMessage msg;
                            ByteArrayOutputStream bout;
                            ChainWriter out;
                            if(smtpServer==null || summaryTos.length==0) {
                                msg=null;
                                bout=null;
                                out=new ChainWriter(System.err);
                            } else {
                                msg=new MailMessage(smtpServer);
                                msg.from(summaryFrom);
                                msg.to(summaryTos[AOServDaemon.getRandom().nextInt(summaryTos.length)]);
                                msg.setSubject("PortMon");
                                // Only show the first characters of the email
                                bout=new ByteArrayOutputStream();
                                out=new ChainWriter(bout);
                            }
                            printSummary(
                                out,
                                errorCodes,
                                aoServers,
                                ipAddresses,
                                ports,
                                netProtocols,
                                appProtocols
                            );
                            if(smtpServer!=null) {
                                out.flush();
                                byte[] bytes=bout.toByteArray();
                                msg.getPrintStream().print(new String(bytes, 0, Math.min(bytes.length, ErrorMailer.MAX_MESSAGE_LENGTH)));
                                msg.sendAndClose();
                            }

                            // Send the full emails
                            String[] fullTos=StringUtility.splitString(AOServDaemonConfiguration.getMonitorEmailFullTo(), '|');
                            String fullFrom=AOServDaemonConfiguration.getMonitorEmailFullFrom();

                            if(smtpServer==null || fullTos.length==0) {
                                msg=null;
                                out=new ChainWriter(System.err);
                            } else {
                                msg=new MailMessage(smtpServer);
                                msg.from(fullFrom);
                                msg.to(fullTos[AOServDaemon.getRandom().nextInt(fullTos.length)]);
                                msg.setSubject("PortMon");
                                out=new ChainWriter(msg.getPrintStream());
                            }
                            printSummary(
                                out,
                                errorCodes,
                                aoServers,
                                ipAddresses,
                                ports,
                                netProtocols,
                                appProtocols
                            );
                            out.print("------------------------------------------------------------\n"
                                    + "\n");
                            printFull(
                                out,
                                reportErrors
                            );
                            if(smtpServer!=null) {
                                out.flush();
                                msg.sendAndClose();
                            }
                            
                        }
                    }
                } catch(ThreadDeath TD) {
                    throw TD;
                } catch(Throwable T) {
                    AOServDaemon.reportError(T, null);
                }
            }
        } finally {
            Profiler.endProfile(Profiler.UNKNOWN);
        }
    }

    private static void printSummary(
        ChainWriter out,
        Map<Integer,Integer> errorCodes,
        Map<AOServer,Integer> aoServers,
        Map<String,Integer> ipAddresses,
        Map<Integer,Integer> ports,
        Map<String,Integer> netProtocols,
        Map<String,Integer> appProtocols
    ) throws IOException, SQLException {
        Profiler.startProfile(Profiler.UNKNOWN, BatchEmailer.class, "printSummary(ChainWriter,Map<Integer,Integer>,Map<AOServer,Integer>,Map<String,Integer>,Map<Integer,Integer>,Map<String,Integer>,Map<String,Integer>)", null);
        try {
            // Print the servers
            Iterator<AOServer> IAO=aoServers.keySet().iterator();
            if(IAO.hasNext()) {
                out.print("Servers:\n");
                while(IAO.hasNext()) {
                    AOServer aoServer=IAO.next();
                    int count=aoServers.get(aoServer).intValue();
                    out.print(aoServer.getServer().getHostname());
                    if(count>1) out.print(' ').print(count);
                    out.print('\n');
                }
                out.print('\n');
            }

            // Print the ipAddresses
            Iterator<String> IIP=ipAddresses.keySet().iterator();
            if(IIP.hasNext()) {
                out.print("IPs:\n");
                while(IIP.hasNext()) {
                    String ipAddress=IIP.next();
                    int count=ipAddresses.get(ipAddress).intValue();
                    out.print(ipAddress);
                    if(count>1) out.print(' ').print(count);
                    out.print('\n');
                }
                out.print('\n');
            }

            // Print the ports
            Iterator<Integer> IPO=ports.keySet().iterator();
            if(IPO.hasNext()) {
                out.print("Ports:\n");
                while(IPO.hasNext()) {
                    Integer port=IPO.next();
                    int count=ports.get(port).intValue();
                    out.print(port.intValue());
                    if(count>1) out.print(' ').print(count);
                    out.print('\n');
                }
                out.print('\n');
            }

            // Print the netProtocols
            Iterator<String> INP=netProtocols.keySet().iterator();
            if(INP.hasNext()) {
                out.print("Net Protocols:\n");
                while(INP.hasNext()) {
                    String netProtocol=INP.next();
                    int count=netProtocols.get(netProtocol).intValue();
                    out.print(netProtocol);
                    if(count>1) out.print(' ').print(count);
                    out.print('\n');
                }
                out.print('\n');
            }

            // Print the appProtocols
            Iterator<String> IAP=appProtocols.keySet().iterator();
            if(IAP.hasNext()) {
                out.print("App Protocols:\n");
                while(IAP.hasNext()) {
                    String appProtocol=IAP.next();
                    int count=appProtocols.get(appProtocol).intValue();
                    if(count>1) out.print(' ').print(count);
                    out.print('\n');
                }
                out.print('\n');
            }

            // Print the errorCodes
            Iterator<Integer> IEC=errorCodes.keySet().iterator();
            if(IEC.hasNext()) {
                out.print("Error Codes:\n");
                while(IEC.hasNext()) {
                    Integer errorCode=IEC.next();
                    int count=errorCodes.get(errorCode).intValue();
                    out.print(codes[errorCode.intValue()]);
                    if(count>1) out.print(' ').print(count);
                    out.print('\n');
                }
                out.print('\n');
            }
        } finally {
            Profiler.endProfile(Profiler.UNKNOWN);
        }
    }
    
    private static void printFull(
        ChainWriter out,
        List<PortError> errors
    ) throws IOException, SQLException {
        Profiler.startProfile(Profiler.UNKNOWN, BatchEmailer.class, "printFull(ChainWriter,List<PortError>)", null);
        try {
            int size=errors.size();
            for(int c=0;c<size;c++) {
                PortError error=errors.get(c);
                out
                    .print(SQLUtility.getDateTime(error.time))
                    .print(", ")
                    .print(descs[error.errorCode])
                ;
                if(error.aoServer!=null) out.print(", ").print(error.aoServer.getServer().getHostname());
                if(error.ipAddress!=null) out.print(", ").print(error.ipAddress);
                if(error.port!=-1) out.print(", ").print(error.port);
                if(error.netProtocol!=null) out.print(", ").print(error.netProtocol);
                if(error.appProtocol!=null) out.print(", ").print(error.appProtocol);
                out.print('\n');
            }
        } finally {
            Profiler.endProfile(Profiler.UNKNOWN);
        }
    }
}